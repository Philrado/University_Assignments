// In the file bstree.h, define the type BStree node, the type BStree and declare prototypes
// of the operations on BStree.

#include "datatype.h"

typedef struct BStree_node {
Key key;
Data data;
struct BStree_node *left, *right;
} BStree_node;
typedef BStree_node** BStree;

// Allocate memory of type BStree node*, set the value to NULL, and return a pointer to the
// allocated memory.
BStree bstree_ini(void);

// Insert data with key into bst. If key is in bst, then do nothing.
// You may want to use a helper function for insertion to create a pointer to a tree node from
// key and data.
void bstree_insert(BStree bst, Key key, Data data);

// Helper method for the bst insert.
void bstree_insert_helper(BStree_node *node_pointer, Key key, Data data);

BStree_node *new_node(Key key, Data data);

// If key is in bst, return key’s associated data. If key is not in bst, return NULL.
Data bstree_search(BStree bst, Key key);

// In order traversal of bst and print each node’s key and data.
void bstree_traversal(BStree bst);

// Helper function for bstree traversal.
void bstree_traversal_helper(BStree_node node_pointer);

// Free all the dynamically allocated memory of bst.
void bstree_free(BStree bst);